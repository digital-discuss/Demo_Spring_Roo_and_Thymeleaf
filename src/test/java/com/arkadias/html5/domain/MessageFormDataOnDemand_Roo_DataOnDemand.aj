// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.arkadias.html5.domain;

import com.arkadias.html5.domain.MessageForm;
import com.arkadias.html5.domain.MessageFormDataOnDemand;
import com.arkadias.html5.service.MessageFormService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MessageFormDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MessageFormDataOnDemand: @Component;
    
    private Random MessageFormDataOnDemand.rnd = new SecureRandom();
    
    private List<MessageForm> MessageFormDataOnDemand.data;
    
    @Autowired
    MessageFormService MessageFormDataOnDemand.messageFormService;
    
    public MessageForm MessageFormDataOnDemand.getNewTransientMessageForm(int index) {
        MessageForm obj = new MessageForm();
        setEmail(obj, index);
        setMessage(obj, index);
        setName(obj, index);
        setPhone(obj, index);
        setWebsite(obj, index);
        return obj;
    }
    
    public void MessageFormDataOnDemand.setEmail(MessageForm obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 64) {
            email = email.substring(0, 64);
        }
        obj.setEmail(email);
    }
    
    public void MessageFormDataOnDemand.setMessage(MessageForm obj, int index) {
        String message = "message_" + index;
        obj.setMessage(message);
    }
    
    public void MessageFormDataOnDemand.setName(MessageForm obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void MessageFormDataOnDemand.setPhone(MessageForm obj, int index) {
        String phone = "phonexxx_" + index;
        if (phone.length() > 17) {
            phone = phone.substring(0, 17);
        }
        obj.setPhone(phone);
    }
    
    public void MessageFormDataOnDemand.setWebsite(MessageForm obj, int index) {
        String website = "website_" + index;
        obj.setWebsite(website);
    }
    
    public MessageForm MessageFormDataOnDemand.getSpecificMessageForm(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MessageForm obj = data.get(index);
        Long id = obj.getId();
        return messageFormService.findMessageForm(id);
    }
    
    public MessageForm MessageFormDataOnDemand.getRandomMessageForm() {
        init();
        MessageForm obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return messageFormService.findMessageForm(id);
    }
    
    public boolean MessageFormDataOnDemand.modifyMessageForm(MessageForm obj) {
        return false;
    }
    
    public void MessageFormDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = messageFormService.findMessageFormEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MessageForm' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MessageForm>();
        for (int i = 0; i < 10; i++) {
            MessageForm obj = getNewTransientMessageForm(i);
            try {
                messageFormService.saveMessageForm(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
